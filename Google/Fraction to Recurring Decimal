Problem description
/*大致思路清晰但是写不出来， 难点：对int型的处理overflow and negative integer*/

Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

Example 1:

Input: numerator = 1, denominator = 2
Output: "0.5"
Example 2:

Input: numerator = 2, denominator = 1
Output: "2"
Example 3:

Input: numerator = 2, denominator = 3
Output: "0.(6)"

Link: https://leetcode.com/problems/fraction-to-recurring-decimal/description/

/*
	Thoughts:
	Divide it into small pieces:
	1. d = 0, return null;
	2. n = 0 -> 0
	3. mark negative. let n = abs(numerator), d = abs(denominator)
	4. consider front and end:
		front = (int)sharp divide
		end: build hashmap to track if the numerator*10 occurs. Once occurs again, return the remianing.
	5. based on sign, return results.
Note:
Have to take int overflow INT_MAX, INT_MIN....
*/


public class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        long nume = Math.abs((long)numerator);
        long deno = Math.abs((long)denominator);
        String sign = (numerator < 0) ^ (denominator < 0) ? "-" : "";
        if (deno == 0) {
        	return "";
        } else if (nume == 0) {
        	return "0";
        } else if (nume % deno == 0) {
        	return sign + nume/deno + "";
        }
        
        HashMap<Long,Integer> map = new HashMap<Long, Integer>();
        StringBuffer rst = new StringBuffer(sign + nume/deno + ".");
        long end = nume%deno * 10;//The decimal portion of the value, after decimal point
  		int i = 0;
        while (end != 0){
			if (map.containsKey(end)) {
				rst.insert(rst.indexOf(".") + map.get(end) + 1, "(");
				rst.append(")");
				return rst.toString();
			}
			rst.append(end/deno);
        	map.put(end, i++);
        	end = (end % deno) * 10;
        }
        return rst.toString();
    }
}
